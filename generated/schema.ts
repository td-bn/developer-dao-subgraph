// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class DevToken extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save DevToken entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save DevToken entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("DevToken", id.toString(), this);
  }

  static load(id: string): DevToken | null {
    return store.get("DevToken", id) as DevToken | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes | null {
    let value = this.get("owner");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set owner(value: Bytes | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromBytes(value as Bytes));
    }
  }

  get OS(): string | null {
    let value = this.get("OS");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set OS(value: string | null) {
    if (value === null) {
      this.unset("OS");
    } else {
      this.set("OS", Value.fromString(value as string));
    }
  }

  get TextEditor(): string | null {
    let value = this.get("TextEditor");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set TextEditor(value: string | null) {
    if (value === null) {
      this.unset("TextEditor");
    } else {
      this.set("TextEditor", Value.fromString(value as string));
    }
  }

  get Clothing(): string | null {
    let value = this.get("Clothing");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Clothing(value: string | null) {
    if (value === null) {
      this.unset("Clothing");
    } else {
      this.set("Clothing", Value.fromString(value as string));
    }
  }

  get Language(): string | null {
    let value = this.get("Language");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Language(value: string | null) {
    if (value === null) {
      this.unset("Language");
    } else {
      this.set("Language", Value.fromString(value as string));
    }
  }

  get Location(): string | null {
    let value = this.get("Location");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Location(value: string | null) {
    if (value === null) {
      this.unset("Location");
    } else {
      this.set("Location", Value.fromString(value as string));
    }
  }

  get Industry(): string | null {
    let value = this.get("Industry");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Industry(value: string | null) {
    if (value === null) {
      this.unset("Industry");
    } else {
      this.set("Industry", Value.fromString(value as string));
    }
  }

  get Mind(): string | null {
    let value = this.get("Mind");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Mind(value: string | null) {
    if (value === null) {
      this.unset("Mind");
    } else {
      this.set("Mind", Value.fromString(value as string));
    }
  }

  get Vibe(): string | null {
    let value = this.get("Vibe");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set Vibe(value: string | null) {
    if (value === null) {
      this.unset("Vibe");
    } else {
      this.set("Vibe", Value.fromString(value as string));
    }
  }

  get tokenURI(): string | null {
    let value = this.get("tokenURI");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toString();
    }
  }

  set tokenURI(value: string | null) {
    if (value === null) {
      this.unset("tokenURI");
    } else {
      this.set("tokenURI", Value.fromString(value as string));
    }
  }
}
